#!/usr/bin/env Rscript

library(optparse)


option_list <- c(make_option('--input', type='character', default='dipp-predicted.Rdata'),
                 make_option('--rank', type='character', default='Species'),
                 make_option('--output', type='character', default='models.rdata'),
                 make_option('--bootstrap', default=F, action='store_true'),
                 make_option('--pdf', default='Rplots.pdf'),
                 make_option('--out-table', default='glms.csv'),
                 make_option('--subset', default='none'),
                 make_option('--absolute', default=F, action='store_true'),
                 make_option('--cores', default=24),
                 make_option('--response', default='seroconverted'),
                 make_option('--keep-1aa', default=F, action='store_true',
                             help='include single autoantibody subjects?'),
                 make_option('--min-abund', default=0.01)
                 )

parser <- OptionParser(option_list = option_list)
options <- parse_args(parser)


library(phyloseq)
library(plyr)
library(ggplot2)
library(reshape2)
library(boot)
library(scales)

load(options$input)

if (!options$`keep-1aa` == T) {
    message("removing single autoantibody subjects")
    dipp <- subset_samples(dipp, aa_number != 1)
}

message('Agglomerating... get some coffee\n')
dipp <- tax_glom(dipp, taxrank=options$rank)

if (options$subset != 'none') {
  form <- parse(text=options$subset)
  dipp <- subset_samples(dipp, eval(form))
}

otus <- data.frame(otu_table(dipp), check.names=F)

taxa_names <- data.frame(tax_table(dipp))

if (options$rank == 'Species') {
  taxa_names <- paste(taxa_names$Genus, taxa_names$Species)
} else {
  taxa_names <- taxa_names[,options$rank]
}

colnames(otus) <- taxa_names

meta <- data.frame(sample_data(dipp))

otus$response <- meta[,options$response]
otus$age <- meta$age_at_sampling
otus$subject <- meta$dipp_person


mdat <- melt(otus, c('response', 'age', 'subject'))

f2 <- response ~ r:age

print(f2)

get_coeff <- function(dat) {
  mod0 <- glm(f1, data=dat)
  coef(mod0)
}

do_test <- function(dat, i, ...) {
  ss <- dat[i,]
  m <- glm(response ~ value:age, data=ss)
  x <- anova(m, test='Chisq')
  return(x[[5]][[2]])
}

missing <- mdat[!complete.cases(mdat),]

message('Removing ', nrow(missing), ' incomplete rows')

mdat <- mdat[complete.cases(mdat),]

do_bootstrap <- function(m) {
  # get sample weights (1/subject frequency)
  f <- data.frame(table(m$subject))
  colnames(f) <- c('subject', 'frequency')
  m <- merge(m, f, id.x='subject', id.y='subject')
  m$weight <- 1/m$frequency
  b <- boot(m, do_test, R=100, sim='balanced', weights=m$weight, parallel='multicore', ncpus=options$cores)
  b$t0
}

# run tests!
glms <- ddply(mdat, ~variable, function(m) {
  message('testing variable: ', m$variable[1])
  if (options$bootstrap) {
    do_bootstrap(m)
  } else {
    do_test(m, rownames(m))
  }
})

glms <- glms[complete.cases(glms),]

glms$p.adjust <- p.adjust(glms$V1, method='BH')

nrow(glms[glms$p.adjust < 0.001,])
nrow(glms[glms$p.adjust < 0.01,])
nrow(glms[glms$p.adjust < 0.05,])

mdat$status <- 'Control'
mdat[mdat$response,]$status <- 'Progressor'

source('lib/ggplot_theme.R')

ycoords <-
  if (options$absolute & options$rank == 'Genus') {
    coord_cartesian(ylim=c(0, 1.5e11))
  } else if (options$absolute & options$rank == 'Species') {
     coord_cartesian(ylim=c(0, 5e10))
  }

ystuff <-
  if (options$absolute) {
    yscale <- scale_y_continuous(breaks=pretty_breaks(50))
    ylab <- ylab('Predicted Copy Number')
  } else {
    yscale <- scale_y_continuous(labels=percent)
    ylab <- ylab('Relative Abundance')
  }

plot_results <- function(alpha, min=0) {
  cat('alpha =', alpha, '\n')
  cat('min =', min, '\n')
  significant <- subset(glms, p.adjust < alpha)
  mdat.s <- subset(mdat, variable %in% significant$variable)
  cat(nrow(mdat.s), '\n')
  top <- ddply(mdat.s, ~variable, function(x) median(x$value) > min)
  top <- top[top$V1,]
  mdat.s <- subset(mdat.s, variable %in% top$variable)
  mdat.s$variable <- factor(mdat.s$variable, levels=unique(mdat.s[with(mdat.s, order(-value)),]$variable))
  cat(nrow(mdat.s), '\n')
  p<-ggplot(mdat.s,
         aes(x=age/30,
             y=value,
             fill=status, color=status,
             linetype=status)) +
  geom_smooth(alpha=0.30,size=1) +
  facet_wrap(~variable) +
  scale_x_continuous(breaks=seq(0, 48, by=3), limits=c(3, 30)) +
  scale_y_continuous(labels=scientific) +
  ggplot.theme +
  scale_color_manual(values=c("#999999",
                             "#FFAB00")) +
  scale_fill_manual(values=c("#999999",
                             "#FFAB00")) +
  ggtitle(paste(options$rank, ' (alpha = ', alpha, ')', sep='')) +
  geom_vline(x=479/30, color='purple', alpha=0.75) +
  geom_vline(x=(479-68)/30, linetype='dashed', color='purple', alpha=0.75) +
  geom_vline(x=(479+68)/30, linetype='dashed', color='purple', alpha=0.75) +
  ycoords +
  ystuff +
  yscale +
  xlab('Age (Months)')
  print(p)
}

pdf(options$pdf)

for (alpha in c(1, 0.05, 0.01, 0.001)) {
  tryCatch({
    plot_results(alpha, min=options$`min-abund`)
  }, error = function(e) { warning(e) })
}

dev.off()

write.csv(glms, file=options$`out-table`)

