#!/usr/bin/env Rscript

library(optparse)

option_list <- c(make_option('--input', type='character', default='dipp.Rdata'),
                 make_option('--rank', type='character', default='Genus'),
                 make_option('--output', type='character', default='models.rdata'),
                 make_option('--pdf', default='Rplots.pdf'),
                 make_option('--out-table', default='glms.csv'),
                 make_option('--subset', default='none'),
                 make_option('--bootstraps', default=100),
                 make_option('--absolute', default=F, action='store_true'),
                 make_option('--response', default='seroconverted'),
                 make_option('--keep-1aa', default=F, action='store_true',
                             help='include single autoantibody subjects?'),
                 make_option('--min-abund', default=0.01)
                 )

parser <- OptionParser(option_list = option_list)
options <- parse_args(parser)


library(phyloseq)
library(plyr)
library(ggplot2)
library(reshape2)
library(boot)
library(scales)
library(magrittr)
library(doParallel)

registerDoParallel(cores=8)

load(options$input)

if (!options$`keep-1aa` == T) {
    message("removing single autoantibody subjects")
    dipp <- subset_samples(dipp, aa_number != 1)
}

if (options$subset != 'none') {
  form <- parse(text=options$subset)
  dipp <- subset_samples(dipp, eval(form))
}

message('Agglomerating... get some coffee\n')
dipp <- tax_glom(dipp, taxrank=options$rank)


dat <- psmelt(dipp)

dat$response <- dat[,options$response]
dat$variable <- dat[,options$rank]

get_coeff <- function(dat) {
  mod0 <- glm(f1, data=dat)
  coef(mod0)
}

f1 <- Abundance ~ Gender + vaginal_delivery + Breast_feeding_any
f2 <-  seroconverted ~ Abundance:age_at_sampling

print(f1)
print(f2)

do_test <- function(dat, i, ...) {
  ss <- dat[i,]
  m <- glm(f2, data=ss, family=binomial(link='logit'))
  x <- anova(m, test='Chisq')
  print(x)
  return(x[[5]][[2]])
}

do_bootstrap <- function(m, n_bootstraps=10) {
  # get sample weights (1/subject frequency)
  f <- data.frame(table(m$dipp_person))
  colnames(f) <- c('subject', 'frequency')
  m <- merge(m, f, id.x='subject', id.y='subject')
  m$weight <- m$frequency/sum(m$frequency)
  b <- boot(m, do_test,
            R=n_bootstraps)
  b$t0
}


# run tests!
glms <- ddply(dat, ~variable, function(m) {
  message('testing variable: ', m$variable[1])
#  p.value <- do_bootstrap(m, n_bootstraps=options$bootstraps)
  p.value <- do_test(m, rownames(m))
  message('p-value: ', p.value)
  return(p.value)
}, .parallel=T)

glms <- glms[complete.cases(glms),]

glms$p.adjust <- p.adjust(glms$V1, method='BH')

nrow(glms[glms$p.adjust < 0.001,])
nrow(glms[glms$p.adjust < 0.01,])
nrow(glms[glms$p.adjust < 0.05,])

dat$status <- factor(dat$response, labels = c('Control', 'Case'))

source('lib/ggplot_theme.R')

ycoords <-
  if (options$absolute & options$rank == 'Genus') {
    coord_cartesian(ylim=c(0, 1.5e11))
  } else if (options$absolute & options$rank == 'Species') {
     coord_cartesian(ylim=c(0, 5e10))
  }

ystuff <-
  if (options$absolute) {
    yscale <- scale_y_continuous(breaks=pretty_breaks(50))
    ylab <- ylab('Predicted Copy Number')
  } else {
    yscale <- scale_y_continuous(labels=percent)
    ylab <- ylab('Relative Abundance')
  }

plot_results <- function(alpha, min=0) {
  cat('alpha =', alpha, '\n')
  cat('min =', min, '\n')
  significant <- subset(glms, p.adjust < alpha)
  dat.s <- subset(dat, variable %in% significant$variable)
  cat(nrow(dat.s), '\n')
  top <- ddply(dat.s, ~variable, function(x) median(x$Abundance) > min)
  top <- top[top$V1,]
  dat.s <- subset(dat.s, variable %in% top$variable)
  dat.s$variable <- factor(dat.s$variable, levels=unique(dat.s[with(dat.s, order(-Abundance)),]$variable))
  cat(nrow(dat.s), '\n')

  # so ggplot2 doesnt randomly switch colors !!
  cols <- c(Control="#999999", Case="#FFAB00")

  p<-ggplot(dat.s,
         aes(x=age_at_sampling/30,
             y=Abundance,
             fill=status, color=status,
             linetype=status)) +
  geom_smooth(alpha=0.30,size=1) +
  facet_wrap(~variable, scale='free_y') +
  scale_x_continuous(breaks=seq(0, 48, by=3), limits=c(3, 30)) +
  scale_y_continuous(labels=scientific) +
  ggplot.theme +
  scale_color_manual(values=cols) +
  scale_fill_manual(values=cols) +
  ggtitle(paste(options$rank, ' (alpha = ', alpha, ')', sep='')) +
  geom_vline(x=479/30, color='purple', alpha=0.75) +
  geom_vline(x=(479-68)/30, linetype='dashed', color='purple', alpha=0.75) +
  geom_vline(x=(479+68)/30, linetype='dashed', color='purple', alpha=0.75) +
  ycoords +
  ystuff +
  yscale +
  xlab('Age (Months)')
  print(p)
}

pdf(options$pdf)

for (alpha in c(1, 0.05, 0.01, 0.001)) {
  tryCatch({
    plot_results(alpha, min=options$`min-abund`)
  }, error = function(e) { warning(e) })
}

dev.off()

write.csv(glms, file=options$`out-table`)

