#!/usr/bin/env rscript

library(optparse)

option_list <- c(make_option('--input', type='character', default='dipp-rf-uniq.RData'),
                 make_option('--rank', type='character', default='Phylum'),
                 make_option('--width', type='numeric', default=51)
                )

source('lib/qvalue.R')

parser <- OptionParser(option_list = option_list)
options <- parse_args(parser)

se <- function(x) sd(x)/sqrt(length(x))

library(phyloseq)
library(zoo)
library(plyr)
library(ggplot2)

load(options$input)

glom <- tax_glom(dipp, taxrank = options$rank)

df <- psmelt(glom)

# do this if you want equal-sized windows
# TODO make this optional.
# --equal_windows or something...
#start <- min(df$age_at_sampling)
#stop <- max(600)
#fake_df <- data.frame(age_at_sampling = start:stop)
#merged <- merge(fake_df, df, all=T)

# calculate rolling median and rolling standard error
# for each OTU at Rank

# sort by age
df <- df[with(df, order(age_at_sampling)),]


smoothed <- ddply(df, ~ Phylum + seroconverted, function(d) {
  downsampled <- downsample(d)

  med <- data.frame(rollapply(d$Abundance, options$width, function(x) {
                   c(abundance=median(x), abundance.se=se(x))
  }))

  age <- data.frame(rollapply(d$age_at_sampling, options$width, function(x) {
                   c(age=median(x), age.se=se(x))
  }))

  return(cbind(med, age))
})


# plot it!

smoothed <- smoothed[complete.cases(smoothed),]

ggplot(smoothed,
       aes(x=age,
           y=abundance,
           color=Phylum)) +
geom_point() +
facet_grid(seroconverted ~ .)

ggplot(smoothed,
       aes(x=age,
           y=abundance,
           fill=seroconverted)) +
facet_wrap(~Phylum, scale='free_y') +
geom_ribbon(aes(ymin = abundance - abundance.se, ymax= abundance + abundance.se), alpha=0.5) +
xlim(min(smoothed$age), 600)
