#!/usr/bin/env Rscript

library(optparse)
library(perm)

option_list <- c(make_option('--input', default='dipp.Rdata'),
                 make_option('--rank', default='Genus'),
                 make_option('--fdr', default='BH'),
                 make_option('--table-out', default='/dev/null'),
                 make_option('--pdf', default='Rplots.pdf'),
                 make_option('--bootstrap', default=T, action='store_true')
                )

parser <- OptionParser(option_list = option_list)
options <- parse_args(parser)

pdf(options$pdf)

source('lib/se.R')
source('lib/ggplot_theme.R')

library(phyloseq)
library(reshape2)
library(ggplot2)
library(plyr)
library(boot)

load(options$input)

glom <- tax_glom(dipp, taxrank = options$rank)

otus <- data.frame(otu_table(glom), check.names=F)
meta <- data.frame(sample_data(glom))

taxa_names <- data.frame(tax_table(glom))
if (options$rank == 'Species') {
  taxa_names <- paste(taxa_names$Genus, taxa_names$Species)
} else {
  taxa_names <- taxa_names[,options$rank]
}
colnames(otus) <- taxa_names

otus$response <- meta$seroconverted
otus$subject <- meta$dipp_person

mdat <- melt(otus, c('response', 'subject'))

do_test_perm <- function(x, ind, ...) {
  permTS(value ~ response, data=x[ind,])$p.value
}

do_test_mw <- function(x, ind, ...) {
  wilcox.test(value ~ response, data=x[ind,])$p.value
}

tests <- ddply(mdat, ~variable, function(x) {
  cat('.')
  if (options$bootstrap == T) {
    # bootstrap p-values
    f <- data.frame(table(x$subject))
    colnames(f) <- c('subject', 'frequency')
    x <- merge(x, f, id.x='subject', id.y='subject')
    x$weight <- x$frequency/sum(x$frequency)
#    pt <- boot(x, do_test_perm, R=100, sim='balanced', weigths=x$weight)
    mw <- boot(x, do_test_mw, R=100, sim='balanced', weights=x$weight)
    c(p.mw=mw$t0)
  } else {
    c(p.pt=do_test_perm(x, rownames(x)), p.mw=do_test_mw(x, rownames(x)))
  }
});

stats <- ddply(mdat, ~ variable + response, function(x) {
  f <- data.frame(table(x$subject))
  colnames(f) <- c('subject', 'frequency')
  x <- merge(x, f, id.x='subject', id.y='subject')
  x$weight <- 1/x$frequency
  error <- se(x$value)
 c(median=median(x$value),
   sd=sd(x$value),
   IQR=IQR(x$value),
   e.1=median(x$value) - error,
   e.2=median(x$value) + error)
})

stats$se <- stats$sd/sqrt(length(unique(mdat$subject)))

tests$p.mw.adjusted <- p.adjust(tests$p.mw, options$fdr)

tests$significant <- tests$p.mw.adjusted < 0.001

cat(nrow(tests[tests$significant,]), 'taxa passed FDR at p < 0.001\n')

merged <- merge(stats, tests)

# calculate higher in controls or higher in cases?
with_ratios <- ddply(merged, ~ variable, function(x) {
 c(greater_in=if (x[x$response,]$median[1] > x[!x$response,]$median[1]) {
   'Progressors'
 } else {
   'Controls'
 },
 ratio=x[x$response,]$median[1]/x[!x$response,]$median[1])
})

merged <- merge(merged, with_ratios)

write.csv(merged, file=options$`table-out`)

#
# Generate table for publication
#


m.cases <- merged[merged$response,]
m.controls <- merged[!merged$response,]

tab <- data.frame(variable=m.cases$variable,
                  greater_in=m.cases$greater_in,
                  significant=m.cases$significant,
                  prog_range= sprintf('%.2g to %.2g', 100*m.cases$e.1, 100*m.cases$e.2),
                  cont_range= sprintf('%.2g to %.2g', 100*m.controls$e.1, 100*m.controls$e.2),
                  p_mw_adj= sprintf('%.4g', m.cases$p.mw.adjusted),
                  median_prog=m.cases$median,
                  median_cont=m.controls$median)

write.csv(tab, file=options$`table-out`)

dev.off()
