#!/usr/bin/env Rscript

library(optparse)
library(perm)

option_list <- c(make_option('--input', default='dipp-rf-uniq.RData'),
                 make_option('--rank', default='Species'),
                 make_option('--fdr', default='BH'),
                 make_option('--table-out', default='/dev/stdout'),
                 make_option('--pdf', default='Rplots.pdf'),
                 make_option('--bootstrap', default=T, action='store_true')
                )

parser <- OptionParser(option_list = option_list)
options <- parse_args(parser)

pdf(options$output)

source('lib/se.R')
source('lib/ggplot_theme.R')

library(phyloseq)
library(reshape2)
library(ggplot2)
library(plyr)
library(boot)

load(options$input)

glom <- tax_glom(dipp, taxrank = options$rank)

otus <- data.frame(otu_table(glom), check.names=F)
meta <- data.frame(sample_data(glom))

taxa_names <- data.frame(tax_table(glom))
if (options$rank == 'Species') {
  taxa_names <- paste(taxa_names$Genus, taxa_names$Species)
} else {
  taxa_names <- taxa_names[,options$rank]
}
colnames(otus) <- taxa_names

otus$response <- meta$seroconverted
otus$subject <- meta$dipp_person

mdat <- melt(otus, c('response', 'subject'))

do_test <- function(x, ind, ...) {
#  wilcox.test(value ~ response, data=x[ind,])$p.value
  permTS(value ~ response, data=x[ind,])$p.value
}


tests <- ddply(mdat, ~variable, function(x) {
  cat('.')
  if (options$bootstrap == T) {
    # bootstrap p-values
    f <- data.frame(table(x$subject))
    colnames(f) <- c('subject', 'frequency')
    x <- merge(x, f, id.x='subject', id.y='subject')
    x$weight <- 1/x$frequency
    b <- boot(x, do_test, R=100, sim='balanced', weigths=x$weight)
  #  print(boot.ci(b))
    c(p.value=b$t0)
  } else {
    c(p.value=do_test(x, rownames(x)))
  }
});

stats <- ddply(mdat, ~ variable + response, function(x) {
  f <- data.frame(table(x$subject))
  colnames(f) <- c('subject', 'frequency')
  x <- merge(x, f, id.x='subject', id.y='subject')
  x$weight <- 1/x$frequency
 c(median=boot(x$value, median, R=10, sim='balanced', weights=x$weight)$t0,
   sd=boot(x$value, sd, R=10, sim='balanced', weights=x$weight)$t0)
})

stats$se <- stats$sd/sqrt(length(unique(mdat$subject)))

tests$p.adjusted <- p.adjust(tests$p.value, options$fdr)
tests$significant <- tests$p.adjusted < 0.001

# plot distribution of p and adjusted p-values
ggplot(tests, aes(x=p.value)) + geom_density() + geom_density(data=tests, aes(x=p.adjusted), color='red') + ggplot.theme

cat(nrow(tests[tests$significant,]), 'taxa passed FDR at p < 0.001\n')

merged <- merge(stats, tests)

significant <- merged[merged$significant,]

dodge <- position_dodge(width=0.9)

ggplot(significant,
       aes(x='x',
           y=median,
           fill=response)) +
geom_bar(stat='identity', position=dodge) +
xlab(options$rank) +
facet_wrap(~variable, scale='free_y') +
geom_errorbar(aes(ymin = median - se, ymax = median + se), position=dodge, width=0.25) +
ggplot.theme +
ggplot.pal.scale

ggplot(mdat[mdat$variable %in% significant$variable,],
       aes(x=response,
           y=value,
           fill=response)) +
facet_wrap(~variable, scale='free_y') +
geom_boxplot() +
ggplot.theme +
ggplot.pal.scale

# calculate higher in controls or higher in cases?
with_ratios <- ddply(merged, ~ variable, function(x) {
 c(greater_in=if (x[x$response,]$median[1] > x[!x$response,]$median[1]) {
   'Progressors'
 } else {
   'Controls'
 },
 ratio=x[x$response,]$median[1]/x[!x$response,]$median[1])
})

merged <- merge(merged, with_ratios)

write.csv(merged, file=options$`table-out`)

dev.off()
