#!/usr/bin/env rscript

# by Raquel Dias and Austin G. Davis-Richardson

library(optparse)

option_list <- c(make_option('--input', type='character', default='dipp-rf-uniq.RData'),
                 make_option('--rank', type='character', default='Phylum'),
                 make_option('--top', type='numeric', default=12),
                 make_option('--min_age', type='numeric', default=0),
                 make_option('--max_age', type='numeric', default=3000)
                 )

parser <- OptionParser(option_list = option_list)
options <- parse_args(parser)

library(phyloseq)
library(plyr)

load(options$input)

dipp <- tax_glom(dipp, taxrank=options$rank)

# subset by age range
ss1 <- subset_samples(dipp, age_at_sampling <= 300)
ss2 <- subset_samples(ss1, age_at_sampling >= 150)
dipp <- ss2

# get top n taxa
form <- parse(text=paste(options$rank, '%in%', 'names(top_phy)'))
top_phy <- sort(tapply(taxa_sums(dipp), tax_table(dipp)[, options$rank], sum), decreasing=TRUE)[1:options$top]
dipp <- subset_taxa(dipp, eval(form))

meta <- data.frame(sample_data(dipp))
otus <- data.frame(otu_table(dipp), check.names=F)

taxa_names <- make.names(data.frame(tax_table(dipp))[,options$rank])

colnames(otus) <- taxa_names

dat <- otus

dat$dipp_person <- meta$dipp_person
dat$seroconverted <- meta$seroconverted

# downsample by person id
downsampled <- ddply(dat, ~ dipp_person +seroconverted, function(x) {
      colMeans(x[,!colnames(x) %in% c('dipp_person', 'seroconverted')])
})


library(glmulti)

# Run the GLM with the genetic algorithm

XR <- as.character(taxa_names)

g1 <- glmulti(
        y = "seroconverted",
        xr = XR,              # variables to include in model
        data = downsampled,         # data
        marginality = TRUE,
        level = 1, 
        method = "g",
        family = binomial(link = "logit")
        )


# Create function for running cross-validation

CV <- function(model1, data) {   
  cv <- NULL  
  values <- matrix(NA, nrow = nrow(data), ncol = 2)
  for (i in 1:nrow(data)) {
    data2 <- data[-i, ]  # leave out one observation 
    model12 <- glm(model1$formula, family =  binomial("logit"), data = data2)       
    values[i,1] <- round(predict(model12, newdata =  data[i, ] , type="response"))
    values[i,2] <- round(as.logical(data$seroconverted[i]))
  }
  cv <- sum(values[ ,1] == values[ ,2])/nrow(values)
  return(cv)
}

# Run cross-validation for the best 100 models:

cv_scores <- c()

for (a in 1:100) {
  f <- glm(g1@objects[[a]]$formula, data=downsampled, family = binomial("logit"))  
  score <- CV(f, downsampled) 
  cv_scores <- c(score, cv_scores)
  cat(paste('model', a, '-', score, '\n'))
}

cat(paste('best score:', max(cv_scores), '\n'))
