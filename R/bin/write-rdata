#!/usr/bin/env Rscript

#
# Load the DIPP data.
# Save as a phyloseq class in an RData file.
# Makes for quick loading later on.
#

library(optparse)

first <- function(x) x[1,]

option_list <- c(make_option('--output', type='character', default='/dev/stdout'),
                 make_option('--unique', type='logical', default=FALSE,
                             action='store_true'),
                 make_option('--depth', type='numeric', default=10000),
                 make_option('--proportion', type='logical',
                             action='store_true', default=FALSE),
                 make_option('--otutable', type='character'),
                 make_option('--sample-data', type='character'),
                 make_option('--subject-data', type='character'),
                 make_option('--sequencing-data', type='character'),
                 make_option('--taxonomies', type='character'),
                 make_option('--normalize', type='character', default='none'),
                 make_option('--tree', type='character'),
                 make_option('--site', type='character', default='all'),
                 make_option('--subset', type='character', help='subset
                             expression', default='none'),
                 make_option('--shuffle', default=FALSE, action='store_true',
                             help='randomize case/control assignments'),
                 make_option('--glom', default='none'))

parser <- OptionParser(option_list = option_list)

options <- parse_args(parser)

suppressMessages(suppressWarnings(source('./lib/load_dipp.R')))
suppressMessages(suppressWarnings(source('./lib/normalize.R')))
suppressMessages(suppressWarnings(source('./lib/misc.R')))

br <- function() cat("\n")

cat("Creating Phyloseq bject\n")
dipp <- load.dipp(otu.table=options$otutable,
                  sequencing.data=options$`sequencing-data`,
                  sample.data=options$`sample-data`,
                  subject.data=options$`subject-data`,
                  tax.table=options$taxonomies,
                  tree=options$tree)

if (options$site != 'all') {
    cat("Selecting from site:", options$site, "\n")
    siteiwant <- options$site
    dipp <- subset_samples(dipp, site == siteiwant)
} else {
    message('Using samples from all sites')
}

dipp

if (options$shuffle) {
  cat("Shuffling cases/controls\n")
  df <- data.frame(sample_data(dipp))
  df$seroconverted <- sample(df$seroconverted)
  sample_data(dipp) <- sample_data(df)
}

cat("Loaded all samples\n")
dipp
br()

cat("Before uniquification\n")
dipp
br()

if (options$unique == TRUE) {
  dipp <- unique_samples(dipp)
}

if (options$subset != 'none') {
  cat('subsetting samples using expression:', options$subset, '\n')
  f <- parse(text=options$subset)
  ss <- subset_samples(dipp, eval(f))
  cat('after subsetting\n')
  print(dipp)
  br()
  dipp <- ss
}

cat("After uniquifying by dipp_person\n")
dipp
br()

if (options$glom != 'none') {
  cat("Agglomerating taxa at", options$glom, "\n")
  dipp <- tax_glom(dipp, taxrank = options$glom)
  cat("After agglomeration:\n")
  print(dipp)
  br()
}

if (options$normalize == 'rarefaction') {
  cat('rarefying\n')
  dipp <- rarefy_even_depth(dipp, sample.size=options$depth)
} else if (options$normalize == 'edger') {
  cat('applying edgeR normalization\n')
  dipp <- edgeRnorm(dipp)
} else {
  dipp <- dipp
}

cat("After normalization\n")
dipp
br()

if (options$proportion == TRUE) {
  cat('applying proportion\n')
  dipp <- transform_sample_counts(dipp, function(x) x/sum(x))
}

cat("Final object\n")
dipp
br()

# enforce orientation of OTU table
if (taxa_are_rows(dipp)) dipp <- t(dipp)

cat(paste("Saving to", options$output, "\n"))
save(dipp, file=options$output)
