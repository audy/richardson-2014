#!/usr/bin/env Rscript

library(optparse)

option_list <- c(make_option('--input', type='character', default='dipp-qpcr-dorei.RData'),
                 make_option('--output', type='character', default='Rplots.pdf'),
                 make_option('--width', type='numeric', default=201),
                 make_option('--top', type='numeric', default=4),
                 make_option('--rank', default='Species'),
                 make_option('--fdr', default='BH'),
                 make_option('--by', default=10),
                 make_option('--absolute', type='logical', action='store_true', default=FALSE)
                )

parser <- OptionParser(option_list = option_list)
options <- parse_args(parser)

library(phyloseq)
library(plyr)
library(scales)
library(reshape2)
library(pROC)

source('lib/sliding_window.R')
source('lib/ggplot_theme.R')
source('lib/se.R')

cat('Loading', options$input, '\n')
load(options$input)

glom <- tax_glom(dipp, taxrank=options$rank)

glom

top_phy <- sort(tapply(taxa_sums(glom), tax_table(glom)[, options$rank], sum), decreasing=TRUE)[1:options$top]
form <- parse(text=paste(options$rank, '%in%', 'names(top_phy)'))
top <- subset_taxa(glom, eval(form))

cat("Looking at top", options$top, "taxa or", 100 * sum(rowSums(top@otu_table)) / sum(rowSums(glom@otu_table)), "% of the total community (by reads)\n")

first <- min(sample_data(glom)$age_at_sampling)
last <- max(sample_data(glom)$age_at_sampling)

start_times <- first:last
start_times <- start_times[seq(1, length(start_times), options$by)]

phy <- top

cat("Looking at top",
    options$top,
    "taxa or",
    100 * sum(rowSums(phy@otu_table)) / sum(rowSums(glom@otu_table)),
    "% of the total community (by reads)\n")

subsets <- generate_subsets(phy, start_times, options$width)

vars <- c('Gender',
          'vaginal_delivery',
          'breast_feeding',
          'DQA_03',
          'DQA_05',
          'DQB_02',
          'DQB_0201',
          'DQB_0301',
          'DQB_0302',
          'DQB_0303',
          'DQB_0501',
          'DQB_0604',
          'seroconverted',
          'age_at_sampling',
          'dipp_person')

sliding.avg <- lapply(subsets, function(s) {
  cat(".")
  # get otus and metadata
  otus <- data.frame(otu_table(s), check.names=F)
  meta <- data.frame(sample_data(s))

  # get names of taxa
  names <- data.frame(tax_table(s)[taxa_names(s)])[,options$rank]
  colnames(otus) <- names

  # add relevant vars to otu data frame
  for (v in vars) otus[,v] <- meta[,v]

  # melt metadata
  mdat <- melt(otus, c('seroconverted', 'age_at_sampling', 'dipp_person', vars))

  # downsample by person by taking the median
  downsampled <- ddply(mdat, variable~seroconverted+dipp_person, function(x) {
       c(age_at_sampling=median(x$age_at_sampling),
         median=median(x$value),
         Gender=x[1,]$Gender,
         vaginal_delivery=x[1,]$vaginal_delivery,
         breast_feeding=x[1,]$breast_feeding,
         DQA_03 = x[1,]$DQA_03,
         DQA_05 = x[1,]$DQA_05,
         DQB_02 = x[1,]$DQB_02,
         DQB_0201 = x[1,]$DQB_0201,
         DQB_0301 = x[1,]$DQB_0301,
         DQB_0302 = x[1,]$DQB_0302,
         DQB_0303 = x[1,]$DQB_0303,
         DQB_0501 = x[1,]$DQB_0501,
         DQB_0604 = x[1,]$DQB_0604
         )
  })

  pvals <- ddply(downsampled, ~variable, function(x) {
      m1 <- glm(median ~ Gender + vaginal_delivery + breast_feeding + DQA_03 + DQA_05 + DQB_02 + DQB_0201 + DQB_0301 + DQB_0302 + DQB_0303 + DQB_0501 + DQB_0604 , data=x)
      m2 <- glm(seroconverted ~ residuals(m1), data=x)
      res <- median(residuals(m2, type="deviance"))
      prob <- predict(m2 ,type=c("response"))
      roc_auc <- tryCatch({ roc(seroconverted ~ prob, data = x)$auc },
               error = function(e) { NA })
      c(p.value=anova(m2, test='Chisq')[[5]][[2]], res=res,auc=roc_auc)
  })

  # TODO correct for multiple hypothesis testing

  averaged <- ddply(downsampled, ~variable+seroconverted, function(x) {
     c(abundance=median(x$median),
       abundance.se=se(x$median),
       age_at_sampling=median(x$age_at_sampling))
  })

  # get median, confidence intervals and add pvalue in one table
  merged <- merge(averaged, pvals, by.x='variable', by.y='variable', all=T)

  merged$width <- max(otus$age_at_sampling) - min(otus$age_at_sampling)
  merged$n <- nrow(otus)
  merged$p.adjusted <- p.adjust(merged$p.value, options$fdr)
  merged$n.cases <- nrow(otus[otus$seroconverted,])
  merged$n.controls <- nrow(otus[!otus$seroconverted,])
  merged
}); cat("\n")

combined <- do.call('rbind', sliding.avg)
combined <- combined[complete.cases(combined),]

limits <- aes(ymin = median - err, ymax = median + err)

combined$status <- factor(combined$seroconverted)

min(combined$p.adjusted)

pdf(options$output)

# p.adjusted distribution
ggplot(combined,
       aes(x=p.adjusted,
           color=variable)) +
geom_density() +
geom_vline(x=0.05)

# number of kids per window
ggplot(combined,
       aes(x=age_at_sampling,
           y=n)) +
geom_line()

# AUC
ggplot(combined[combined$age_at_sampling < 600 & combined$age_at_sampling > 100,],
       aes(x=seroconverted,
           y=auc,
           color=variable)) +
geom_boxplot()

# window width distribution
ggplot(combined,
       aes(x=width)) +
geom_density() +
ggtitle(paste(median(combined$w), se(combined$w)))

#
# Set colors for significance levels
#

combined$significance <- 'insignificant'
sig.colours <- c(insignificant="#FFFFFF")

if (min(combined$p.adjusted) < 0.05) {
  sig.colours <- c(sig.colours, '0.05'="#218457")
  combined[combined$p.adjusted < 0.05,]$significance <- '0.05'
}
if (min(combined$p.adjusted) < 0.01) {
  sig.colours <- c(sig.colours, '0.01'="#FF0000") # throw a party
  combined[combined$p.adjusted < 0.01,]$significance <- '0.01'
}
if (min(combined$p.adjusted) < 0.001) {
  sig.colours <- c(sig.colours, '0.001'="#00FF00") # throw a party
  combined[combined$p.adjusted < 0.001,]$significance <- '0.001'
}

sig.scale <- scale_colour_manual(values=sig.colours)

combined$significance <- as.factor(combined$significance)


if (options$absolute) {
  yscale <- scale_y_continuous(breaks=pretty_breaks(50))
  ylab <- ylab('Predicted Copy Number')
} else {
  yscale <- scale_y_continuous(labels=percent)
  ylab <- ylab('Relative Abundance')
}

##
# THE SLIDING WINDOW PLOT
#

p <- ggplot(combined,
         aes(x=age_at_sampling,
             y=abundance,
             fill=seroconverted)) +
  geom_ribbon(aes(ymin = abundance - abundance.se,
                  ymax = abundance + abundance.se),
              alpha=0.5) +
  facet_wrap(~variable,
             scale='free_y') +
  xlim(100, 800) +
  geom_rug(aes(color=significance), sides='b') +
  ylab +
  yscale +
  ggplot.theme +
  ggplot.pal.scale +
  sig.scale +
  xlab('Subject Age (days)') +
  geom_vline(x=479, color='purple', alpha=0.75) +
  geom_vline(x=479-68, linetype='dashed', color='purple', alpha=0.75) +
  geom_vline(x=479+68, linetype='dashed', color='purple', alpha=0.75) +
  ggtitle(options$rank) +
  theme(strip.text=element_text(face='italic'))

if (options$absolute & options$rank == 'Genus') {
  p <- p + coord_cartesian(ylim=c(0, 1.5e11))
} else if (options$absolute & options$rank == 'Species') {
  p <- p + coord_cartesian(ylim=c(0, 5e10))
}

p

ggplot(combined,
       aes(x=age_at_sampling,
           y=abundance,
           color=significance)) +
geom_point() +
facet_wrap(~variable, scale='free_y')

dev.off()
