#!/usr/bin/env Rscript

library(optparse)


option_list <- c(make_option('--input', type='character', default='dipp.Rdata'),
                 make_option('--output', type='character', default='Rplots.pdf'),
                 make_option('--width', type='numeric', default=201),
                 make_option('--top', type='numeric', default=1),
                 make_option('--bootstraps', type='numeric', default=100),
                 make_option('--rank', default='Species'),
                 make_option('--fdr', default='BH'),
                 make_option('--by', default=10),
                 make_option('--absolute', type='logical', action='store_true', default=FALSE),
                 make_option('--table-out', default='sliding-window.csv')
                )

parser <- OptionParser(option_list = option_list)
options <- parse_args(parser)

library(phyloseq)
library(plyr)
library(scales)
library(reshape2)
library(pROC)
library(boot)
library(ggthemr)

ggthemr('fresh')

source('lib/sliding_window.R')
source('lib/ggplot_theme.R')
source('lib/se.R')

cat('Loading', options$input, '\n')
load(options$input)

glom <- tax_glom(dipp, taxrank=options$rank)

glom

cat('Using top', options$top, 'taxa\n')

top_phy <- sort(tapply(taxa_sums(glom), tax_table(glom)[, options$rank], sum), decreasing=TRUE)[1:options$top]
form <- parse(text=paste(options$rank, '%in%', 'names(top_phy)'))
top <- subset_taxa(glom, eval(form))

first <- min(sample_data(glom)$age_at_sampling)
last <- max(sample_data(glom)$age_at_sampling)

start_times <- first:last
start_times <- start_times[seq(1, length(start_times), options$by)]

phy <- top

ggplot(psmelt(phy),
       aes(x=age_at_sampling,
           y=Abundance,
           fill=seroconverted)) +
geom_smooth() +
xlim(100, 600)

source('lib/se.R')

cat("Looking at top",
    options$top,
    "taxa or",
    100 * sum(rowSums(phy@otu_table)) / sum(rowSums(glom@otu_table)),
    "% of the total community (by reads)\n")

subsets <- generate_subsets(phy, start_times, options$width)

#
# Statistics Functions (for use with boot)
#
test_glm <- function(dat, i, ...) {
  ss <- dat[i,]
  m <- glm(seroconverted ~ value, data=ss, family=binomial(link='logit'))
  p.value <- anova(m, test='Chisq')[[5]][[2]]
  return(p.value)
}

test_roc <- function(dat, i, ...) {
  ss <- dat[i,]
  m <- glm(seroconverted ~ value, data=ss, family=binomial(link='logit'))
  prob <- predict(m ,type=c("response"))
  as.numeric(roc(seroconverted ~ prob, data=ss)$auc)
}

test_mw <- function(dat, i, ...) {
  ss <- dat[i,]
  # wilcox test takes response on the right for some reason...
  wilcox.test(value ~ seroconverted, dat=dat, exact=F)$p.value
}

get_df <- function(s) {
  # get otus and metadata
  vars <- c('seroconverted', 'age_at_sampling', 'dipp_person')
  otus <- data.frame(otu_table(s), check.names=F)
  meta <- data.frame(sample_data(s))
  # get names of taxa
  names <- data.frame(tax_table(s)[taxa_names(s)])[,options$rank]
  colnames(otus) <- names
  for (v in vars) otus[,v] <- meta[,v]
  # melt metadata
  mdat <- melt(otus, vars)
}

# turn subsets into data-frames
subsets <- lapply(subsets, get_df)

# get rid of "crappy" subsets
keep <- lapply(subsets, function(x) {
  sum(x$seroconverted) > 20 & sum(!x$seroconverted) > 20
})

subsets <- subsets[unlist(keep)]

sliding.avg <- lapply(1:length(subsets), function(i) {
  message('testing window ', i)
  mdat <- subsets[[i]]
  # downsample
  ds <- ddply(mdat, ~ variable + dipp_person, function(x) {
    c(seroconverted=x[1,]$seroconverted,
      value=median(x$value),
      age_at_sampling=median(x$age_at_sampling))
  })
  pvals <- ddply(ds, ~variable, function(x) {
      # run statistical tests
      p.glm <- boot(x, test_glm, R=options$bootstraps)$t0
      auc <- boot(x, test_roc, R=options$bootstraps)$t0
      p.mw <- boot(x, test_mw, R=options$bootstraps)$t0
      # get medians, and standard error
      stat.med <- ddply(x, ~ seroconverted, function(y) median(y$value))
      stat.se <- ddply(x, ~ seroconverted, function(y) se(y$value))
      n.cases <- sum(x$seroconverted)
      n.controls <- sum(!x$seroconverted)
      width <- max(x$age_at_sampling) - min(x$age_at_sampling)
      c(p.glm=p.glm, auc=auc, p.mw=p.mw, n.cases=n.cases,n.controls=n.controls, width=width, n=n.cases+n.controls)
  })
  averaged <- ddply(mdat , ~variable+seroconverted, function(x) {
     c(abundance=median(x$value),
       abundance.se=se(x$value),
       age_at_sampling=median(x$age_at_sampling))
  })
  # get median, confidence intervals and add pvalue in one table
  merged <- merge(averaged, pvals, by.x='variable', by.y='variable', all=T)
  merged
})

combined <- do.call('rbind', sliding.avg)
combined <- combined[complete.cases(combined),]

limits <- aes(ymin = median - err, ymax = median + err)

combined$status <- factor(combined$seroconverted)

min(combined$p.mw)

pdf(options$output)

# p.mw distribution
ggplot(combined,
       aes(x=p.mw,
           color=variable)) +
geom_density() +
geom_vline(x=0.05)

# number of kids per window
ggplot(combined,
       aes(x=age_at_sampling,
           y=n)) +
geom_line()

# AUC
ggplot(combined[combined$age_at_sampling < 600 & combined$age_at_sampling > 100,],
       aes(x=seroconverted,
           y=auc,
           color=variable)) +
geom_boxplot()

# window width distribution
ggplot(combined,
       aes(x=width)) +
geom_density() +
ggtitle(paste(median(combined$w), se(combined$w)))

#
# Set colors for significance levels
#

combined$significance <- 'insignificant'
sig.colours <- c(insignificant="#FFFFFF")

if (min(combined$p.mw) < 0.05) {
  sig.colours <- c(sig.colours, '0.05'="#218457")
  combined[combined$p.mw < 0.05,]$significance <- '0.05'
}
if (min(combined$p.mw) < 0.01) {
  sig.colours <- c(sig.colours, '0.01'="#FF0000") # throw a party
  combined[combined$p.mw < 0.01,]$significance <- '0.01'
}
if (min(combined$p.mw) < 0.001) {
  sig.colours <- c(sig.colours, '0.001'="#00FF00") # throw a party
  combined[combined$p.mw < 0.001,]$significance <- '0.001'
}

sig.scale <- scale_colour_manual(values=sig.colours)

combined$significance <- as.factor(combined$significance)

write.csv(combined, file=options$`table-out`)


if (options$absolute) {
  yscale <- scale_y_continuous(breaks=pretty_breaks(50))
  ylab <- ylab('Predicted Copy Number')
} else {
  yscale <- scale_y_continuous(labels=percent)
  ylab <- ylab('Relative Abundance')
}

##
# THE SLIDING WINDOW PLOT
#

p <- ggplot(combined,
         aes(x=age_at_sampling/30,
             y=abundance,
             fill=seroconverted)) +
  geom_ribbon(aes(ymin = abundance - abundance.se,
                  ymax = abundance + abundance.se),
              alpha=0.5) +
  facet_wrap(~variable,
             scale='free_y') +
  geom_rug(aes(color=significance), sides='b') +
  xlab('Age at Sampling (Months)') +
  geom_vline(x=479 /30, color='purple', alpha=0.75) +
  geom_vline(x=(479-68)/30, linetype='dashed', color='purple', alpha=0.75) +
  geom_vline(x=(479+68)/30, linetype='dashed', color='purple', alpha=0.75) +
  ggtitle(options$rank) +
  scale_x_continuous(breaks=seq(0, 48, by=3), limits=c(3, 30)) +
  theme(strip.text=element_text(face='italic')) +
  ylab + yscale + ggplot.theme + ggplot.pal.scale + sig.scale


if (options$absolute & options$rank == 'Genus') {
  p <- p + coord_cartesian(ylim=c(0, 1.5e11))
} else if (options$absolute & options$rank == 'Species') {
  p <- p + coord_cartesian(ylim=c(0, 5e10))
}

p

dev.off()
