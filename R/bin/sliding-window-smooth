#!/usr/bin/env Rscript

library(optparse)

option_list <- c(make_option('--input', type='character', default='dipp-rf-uniq.RData'),
                 make_option('--output', type='character', default='Rplots.pdf'),
                 make_option('--width', type='numeric', default=201),
                 make_option('--top', type='numeric', default=4),
                 make_option('--rank', default='Species'),
                 make_option('--fdr', default='BY'),
                 make_option('--by', default=30)
                )

parser <- OptionParser(option_list = option_list)
options <- parse_args(parser)

library(phyloseq)
library(plyr)
library(scales)
library(reshape2)
library(qvalue)

source('lib/sliding_window.R')
source('lib/ggplot_theme.R')
source('lib/se.R')

load(options$input)

glom <- tax_glom(dipp, taxrank=options$rank)

top_phy <- sort(tapply(taxa_sums(glom), tax_table(glom)[, options$rank], sum), decreasing=TRUE)[1:options$top]
form <- parse(text=paste(options$rank, '%in%', 'names(top_phy)'))
top <- subset_taxa(glom, eval(form))

first <- min(sample_data(glom)$age_at_sampling)
last <- max(sample_data(glom)$age_at_sampling)

start_times <- first:last
start_times <- start_times[seq(1, length(start_times), options$by)]

phy <- top

subsets <- generate_subsets(phy, start_times, options$width)

vars <- c('Gender',
          'vaginal_delivery',
          'breast_feeding')

sliding.avg <- lapply(subsets, function(s) {
  cat("I'm goin'\n")
  # get otus and metadata
  otus <- data.frame(otu_table(s), check.names=F)
  meta <- data.frame(sample_data(s))

  # get names of taxa
  names <- data.frame(tax_table(s)[taxa_names(s)])[,options$rank]
  colnames(otus) <- names

  # add relevant vars to otu data frame
  otus$seroconverted <- meta$seroconverted
  otus$age_at_sampling <- meta$age_at_sampling
  otus$dipp_person <- meta$dipp_person

  for (v in vars) otus[,v] <- meta[,v]

  # melt metadata
  mdat <- melt(otus, c('seroconverted', 'age_at_sampling', 'dipp_person', vars))

  # downsample by person by taking the median
  downsampled <- ddply(mdat, variable~seroconverted+dipp_person, function(x) {
       c(age_at_sampling=median(x$age_at_sampling),
         median=median(x$value),
         Gender=x[1,]$Gender,
         vaginal_delivery=x[1,]$vaginal_delivery,
         breast_feeding=x[1,]$breast_feeding)
  })

  pvals <- ddply(downsampled, ~variable, function(x) {
      m1 <- glm(median ~ Gender + vaginal_delivery + breast_feeding, data=x)
      m2 <- glm(seroconverted ~ residuals(m1), data=x)
      c(p.value=anova(m2, test='Chisq')[[5]][[2]])
  })

  # TODO correct for multiple hypothesis testing

  averaged <- ddply(downsampled, ~variable+seroconverted, function(x) {
     c(abundance=median(x$median),
       abundance.se=se(x$median),
       age_at_sampling=median(x$age_at_sampling))
  })

  # get median, confidence intervals and add pvalue in one table
  merged <- merge(averaged, pvals, by.x='variable', by.y='variable', all=T)

  merged$width <- max(otus$age_at_sampling) - min(otus$age_at_sampling)
  merged$n <- nrow(otus)
  merged$p.adjusted <- p.adjust(merged$p.value, options$fdr)
  merged$n.cases <- nrow(otus[otus$seroconverted,])
  merged$n.controls <- nrow(otus[!otus$seroconverted,])

  merged 
})

combined <- do.call('rbind', sliding.avg)

limits <- aes(ymin = median - err, ymax = median + err)

combined$status <- factor(combined$seroconverted,
                          labels=c('Case', 'Control'))

sig_palette <- c("#218457", # 0.05
                 "#FFFFFF") # insignificant

ggplot.pal.sig <-
  scale_colour_manual(values=c("#FFFFFF", "#218457" ))

pdf(options$output)

ggplot(combined,
       aes(x=p.value,
           color=variable)) +
geom_density() +
geom_vline(x=0.05)

ggplot(combined,
       aes(x=age_at_sampling,
           y=n)) +
geom_line()

ggplot(combined,
       aes(x=age_at_sampling,
           y=abundance,
           fill=status)) +
geom_ribbon(aes(ymin = abundance - abundance.se,
                ymax = abundance + abundance.se),
            alpha=0.5) +
facet_wrap(~variable,
           scale='free_y') +
xlim(100, 800) + 
geom_rug(aes(color=p.adjusted < 0.05), sides='b') +
scale_y_continuous(labels=percent) +
ggplot.pal.sig +
ggplot.theme +
ggplot.pal.scale + 
geom_vline(x=479, color='purple', alpha=0.75) +
geom_vline(x=479-68, linetype='dashed', color='purple', alpha=0.75) +
geom_vline(x=479+68, linetype='dashed', color='purple', alpha=0.75) +
ylab('Relative Abundance') +
ggtitle(options$rank) +
theme(strip.text=element_text(face='italic'))

dev.off()
